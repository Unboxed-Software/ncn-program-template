/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getOperatorVaultRewardRouteDecoder,
  getOperatorVaultRewardRouteEncoder,
  type OperatorVaultRewardRoute,
  type OperatorVaultRewardRouteArgs,
} from '../types';

export type NCNRewardRouter = {
  discriminator: bigint;
  ncn: Address;
  epoch: bigint;
  bump: number;
  slotCreated: bigint;
  totalRewards: bigint;
  rewardPool: bigint;
  rewardsProcessed: bigint;
  reserved: Array<number>;
  lastVoteIndex: number;
  lastRewardsToProcess: bigint;
  protocolRewards: bigint;
  ncnRewards: bigint;
  operatorVaultRewards: bigint;
  operatorVaultRewardRoutes: Array<OperatorVaultRewardRoute>;
};

export type NCNRewardRouterArgs = {
  discriminator: number | bigint;
  ncn: Address;
  epoch: number | bigint;
  bump: number;
  slotCreated: number | bigint;
  totalRewards: number | bigint;
  rewardPool: number | bigint;
  rewardsProcessed: number | bigint;
  reserved: Array<number>;
  lastVoteIndex: number;
  lastRewardsToProcess: number | bigint;
  protocolRewards: number | bigint;
  ncnRewards: number | bigint;
  operatorVaultRewards: number | bigint;
  operatorVaultRewardRoutes: Array<OperatorVaultRewardRouteArgs>;
};

export function getNCNRewardRouterEncoder(): Encoder<NCNRewardRouterArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['epoch', getU64Encoder()],
    ['bump', getU8Encoder()],
    ['slotCreated', getU64Encoder()],
    ['totalRewards', getU64Encoder()],
    ['rewardPool', getU64Encoder()],
    ['rewardsProcessed', getU64Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 128 })],
    ['lastVoteIndex', getU16Encoder()],
    ['lastRewardsToProcess', getU64Encoder()],
    ['protocolRewards', getU64Encoder()],
    ['ncnRewards', getU64Encoder()],
    ['operatorVaultRewards', getU64Encoder()],
    [
      'operatorVaultRewardRoutes',
      getArrayEncoder(getOperatorVaultRewardRouteEncoder(), { size: 256 }),
    ],
  ]);
}

export function getNCNRewardRouterDecoder(): Decoder<NCNRewardRouter> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['epoch', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['slotCreated', getU64Decoder()],
    ['totalRewards', getU64Decoder()],
    ['rewardPool', getU64Decoder()],
    ['rewardsProcessed', getU64Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 128 })],
    ['lastVoteIndex', getU16Decoder()],
    ['lastRewardsToProcess', getU64Decoder()],
    ['protocolRewards', getU64Decoder()],
    ['ncnRewards', getU64Decoder()],
    ['operatorVaultRewards', getU64Decoder()],
    [
      'operatorVaultRewardRoutes',
      getArrayDecoder(getOperatorVaultRewardRouteDecoder(), { size: 256 }),
    ],
  ]);
}

export function getNCNRewardRouterCodec(): Codec<
  NCNRewardRouterArgs,
  NCNRewardRouter
> {
  return combineCodec(getNCNRewardRouterEncoder(), getNCNRewardRouterDecoder());
}

export function decodeNCNRewardRouter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NCNRewardRouter, TAddress>;
export function decodeNCNRewardRouter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NCNRewardRouter, TAddress>;
export function decodeNCNRewardRouter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<NCNRewardRouter, TAddress>
  | MaybeAccount<NCNRewardRouter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNCNRewardRouterDecoder()
  );
}

export async function fetchNCNRewardRouter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NCNRewardRouter, TAddress>> {
  const maybeAccount = await fetchMaybeNCNRewardRouter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNCNRewardRouter<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NCNRewardRouter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNCNRewardRouter(maybeAccount);
}

export async function fetchAllNCNRewardRouter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NCNRewardRouter>[]> {
  const maybeAccounts = await fetchAllMaybeNCNRewardRouter(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNCNRewardRouter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NCNRewardRouter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeNCNRewardRouter(maybeAccount)
  );
}
