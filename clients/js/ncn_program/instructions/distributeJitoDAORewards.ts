/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISTRIBUTE_JITO_D_A_O_REWARDS_DISCRIMINATOR = 17;

export function getDistributeJitoDAORewardsDiscriminatorBytes() {
  return getU8Encoder().encode(DISTRIBUTE_JITO_D_A_O_REWARDS_DISCRIMINATOR);
}

export type DistributeJitoDAORewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountEpochState extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountNcnRewardRouter extends string | IAccountMeta<string> = string,
  TAccountNcnRewardReceiver extends string | IAccountMeta<string> = string,
  TAccountJitoDaoFeeWallet extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEpochState extends string
        ? WritableAccount<TAccountEpochState>
        : TAccountEpochState,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountNcnRewardRouter extends string
        ? WritableAccount<TAccountNcnRewardRouter>
        : TAccountNcnRewardRouter,
      TAccountNcnRewardReceiver extends string
        ? WritableAccount<TAccountNcnRewardReceiver>
        : TAccountNcnRewardReceiver,
      TAccountJitoDaoFeeWallet extends string
        ? WritableAccount<TAccountJitoDaoFeeWallet>
        : TAccountJitoDaoFeeWallet,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeJitoDAORewardsInstructionData = {
  discriminator: number;
  epoch: bigint;
};

export type DistributeJitoDAORewardsInstructionDataArgs = {
  epoch: number | bigint;
};

export function getDistributeJitoDAORewardsInstructionDataEncoder(): Encoder<DistributeJitoDAORewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_JITO_D_A_O_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getDistributeJitoDAORewardsInstructionDataDecoder(): Decoder<DistributeJitoDAORewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getDistributeJitoDAORewardsInstructionDataCodec(): Codec<
  DistributeJitoDAORewardsInstructionDataArgs,
  DistributeJitoDAORewardsInstructionData
> {
  return combineCodec(
    getDistributeJitoDAORewardsInstructionDataEncoder(),
    getDistributeJitoDAORewardsInstructionDataDecoder()
  );
}

export type DistributeJitoDAORewardsInput<
  TAccountEpochState extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountNcnRewardRouter extends string = string,
  TAccountNcnRewardReceiver extends string = string,
  TAccountJitoDaoFeeWallet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  epochState: Address<TAccountEpochState>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  ncnRewardRouter: Address<TAccountNcnRewardRouter>;
  ncnRewardReceiver: Address<TAccountNcnRewardReceiver>;
  jitoDaoFeeWallet: Address<TAccountJitoDaoFeeWallet>;
  systemProgram?: Address<TAccountSystemProgram>;
  epoch: DistributeJitoDAORewardsInstructionDataArgs['epoch'];
};

export function getDistributeJitoDAORewardsInstruction<
  TAccountEpochState extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountNcnRewardRouter extends string,
  TAccountNcnRewardReceiver extends string,
  TAccountJitoDaoFeeWallet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: DistributeJitoDAORewardsInput<
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver,
    TAccountJitoDaoFeeWallet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeJitoDAORewardsInstruction<
  TProgramAddress,
  TAccountEpochState,
  TAccountConfig,
  TAccountNcn,
  TAccountNcnRewardRouter,
  TAccountNcnRewardReceiver,
  TAccountJitoDaoFeeWallet,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    epochState: { value: input.epochState ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ncnRewardRouter: { value: input.ncnRewardRouter ?? null, isWritable: true },
    ncnRewardReceiver: {
      value: input.ncnRewardReceiver ?? null,
      isWritable: true,
    },
    jitoDaoFeeWallet: {
      value: input.jitoDaoFeeWallet ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.epochState),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ncnRewardRouter),
      getAccountMeta(accounts.ncnRewardReceiver),
      getAccountMeta(accounts.jitoDaoFeeWallet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDistributeJitoDAORewardsInstructionDataEncoder().encode(
      args as DistributeJitoDAORewardsInstructionDataArgs
    ),
  } as DistributeJitoDAORewardsInstruction<
    TProgramAddress,
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver,
    TAccountJitoDaoFeeWallet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDistributeJitoDAORewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    epochState: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    ncnRewardRouter: TAccountMetas[3];
    ncnRewardReceiver: TAccountMetas[4];
    jitoDaoFeeWallet: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: DistributeJitoDAORewardsInstructionData;
};

export function parseDistributeJitoDAORewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeJitoDAORewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      epochState: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      ncnRewardRouter: getNextAccount(),
      ncnRewardReceiver: getNextAccount(),
      jitoDaoFeeWallet: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDistributeJitoDAORewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
